#!/usr/bin/env perl

use strict ;
use warnings ;

use Cwd 'cwd' ;
use Cwd 'abs_path' ;
use File::Basename ;

die "usage: ./run-trust4 [OPTIONS]:\n".
    "Required:\n".
    #"\t[Input]:\n".
    "\t-b STRING: path to bam file\n".
    "\t-1 STRING -2 STRING: path to pair-end read files\n".
    "\t-u STRING: path to single-end read file\n".
    "\t-f STRING: path to the fasta file coordinate and sequence of V/D/J/C genes\n".
    "Optional:\n".
    "\t--ref STRING: path to detailed V/D/J/C gene reference file, such as from IMGT database. (default: not used)\n".
    "\t-o STRING: prefix of output files. (default: inferred from file prefix)\n".
    #"\t--jellyfish: use jellyfish2 to count the kmers. (default: not used)\n"
    ""
	if ( @ARGV == 0 ) ;

sub system_call
{
	print STDERR "SYSTEM CALL: ".join(" ",@_)."\n";
	system(@_) == 0
		or die "system @_ failed: $?";
	#print STDERR " finished\n";
} 

my $WD = dirname( abs_path( $0 ) ) ;
my $kmerSize = 21 ;
my $bloomFilterSize = 100000000 ;
my $i ;

my $jellyfishBin = "jellyfish" ;
#if ( -e "$WD/jellyfish/bin/jellyfish" )
#{
#	$jellyfishBin = "$WD/jellyfish/bin/jellyfish" ;
#}

# process the options.
my @singleFiles ;
my @firstMateFiles ;
my @secondMateFiles ;
my @bamFiles ;
my $useJellyfish = 0 ;
my $prefix = "" ;
my $vdjcFasta = "" ;
my $vdjcRef = "" ;
my $mainArgs = "" ;


for ( $i = 0 ; $i < @ARGV ; ++$i )
{
	if ( $ARGV[$i] eq "-1" )
	{
		push @firstMateFiles, $ARGV[$i + 1] ;
		$mainArgs .= $ARGV[$i]." ".$ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[$i] eq "-2" )
	{	
		push @secondMateFiles, $ARGV[$i + 1] ;
		$mainArgs .= $ARGV[$i]." ".$ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[ $i ] eq "-u" ) 
	{
		push @singleFiles, $ARGV[ $i + 1 ] ;
		$mainArgs .= $ARGV[$i]." ".$ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[$i] eq "-b" )
	{
		push @bamFiles, $ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[$i] eq "-f" )
	{	
		$vdjcFasta = $ARGV[$i + 1] ;
		$mainArgs .= $ARGV[$i]." ".$ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[$i] eq "-o" )
	{
		$prefix = $ARGV[$i + 1] ;
		$mainArgs .= $ARGV[$i]." ".$ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[$i] eq "--ref" )
	{
		$vdjcRef = $ARGV[$i + 1] ;
		++$i ;
	}
	elsif ( $ARGV[$i] eq "--jellyfish" )
	{
		$useJellyfish = 1 ;
	}
}

if ( @bamFiles == 0 && @firstMateFiles == 0 && @singleFiles == 0 )
{
	die "Need to use -b/{-1,-2}/-u to specify input reads.\n" ;
}

if ( $vdjcFasta eq "" )
{
	die "Need to use -f to specify the sequence of annotated V/D/J/C genes' sequence.\n" ;
}

# Infer the output prefix.
if ( $prefix eq "" )
{
	# infer the output prefix.
	if ( @bamFiles > 0 )
	{
		$prefix = "TRUST_".( split /\./, basename( $bamFiles[0] ) )[0] ;
	}
	elsif ( @firstMateFiles > 0 )
	{
		$prefix = "TRUST_".( split /\./, basename( $firstMateFiles[0] ) )[0] ;
	}
	elsif ( @singleFiles > 0 )
	{
		$prefix = "TRUST_".( split /\./, basename( $singleFiles[0] ) )[0] ;
	}
	else
	{
		$prefix = "TRUST" ;
	}

	$mainArgs .= " -o $prefix" ;
}

# Extract the file
if ( @bamFiles > 0 )
{
	system_call( "$WD/bam-extractor -b ".$bamFiles[0]." -f $vdjcFasta -o ${prefix}_toassemble" ) ;

	# determine paired-end or single-end
	if ( -e $prefix."_toassemble_1.fa" )
	{
		push @firstMateFiles, $prefix."_toassemble_1.fa" ;
		push @secondMateFiles, $prefix."_toassemble_2.fa" ;
		$mainArgs .= " -1 ".$prefix."_toassemble_1.fa -2 ".$prefix."_toassemble_2.fa" ;
	}
	else
	{
		push @singleFiles, "${prefix}_toassemble.fa" ;
		$mainArgs .= " -u ${prefix}_toassemble.fa" ;
	}
}

# Run the assembly 
system_call( "$WD/trust4 $mainArgs" ) ;

# Annotation 
if ( $vdjcRef eq "" )
{
	system_call( "$WD/annotator -f $vdjcFasta -a ${prefix}_final.out > ${prefix}_annot.out" ) ;
}
else
{
	system_call( "$WD/annoator -f $vdjcRef -a ${prefix}_final.out > ${prefix}_annot.out" ) ;
}

# Filter and output.
